package org.igazine.utils {

/**
 * 
 * Live Broadcaster
 * Live Streaming Software for Mac / Windows
 * Project Copyright (c) 2014 - 2017 Yatko (LLC) and Kalman Venczel
 * File/Lib Copyright (c) 2017 Tamas Sopronyi & Yatko (LLC)
 * Licensed under GNU General Public License v3.0, with Runtime Library Exception
 * This source file is part of the cameleon.live project - https://www.cameleon.live
 * 
 * See https://app.h7.org/cameleon/ for project information and documentation
 * See https://app.h7.org/cameleon/LICENSE.txt for license information
 * See https://app.h7.org/cameleon/CONTRIBUTORS.txt for list of project authors
 *  
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 * 
 */
 
/**
 * 
 * ActionScript file
 * Copyright (c) 2017 Tamas Sopronyi & Yatko (LLC)
 * Author: Tamas Sopronyi, 2017
 * 
 */
	
	import flash.utils.ByteArray;
	import com.hurlant.crypto.hash.MD5;
	
	public class Strings {
		
		private static var _chars:String = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$%^&*()_+-=[]{};:|,./<>? ";
		private static var _chars2:String = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		
		private static var _cie:Boolean = false;
		
		public static const METHOD_INCREMENTAL_CHARSET:int = 1;
		public static const METHOD_HEX:int = 2;
		public static const METHOD_MAX_RADIX:int = 3;
		public static const METHOD_ZIP_HEX:int = 4;
		public static const METHOD_ZIP_MAX_RADIX:int = 5;
		public static const METHOD_RADIX:int = 6;
		public static const METHOD_INCREMENTAL_CHARSET_UPCS:int = 7;
		public static const METHOD_MD5:int = 8;

		public function Strings() {
			// constructor code
		}
		
		public static function encode(ins:String, method:int = METHOD_INCREMENTAL_CHARSET, rdx:int = 36, convertIfEmpty:Boolean = false):String {
			var s:String;
			_cie = convertIfEmpty;
			if ( (ins.length == 0) && (!_cie) ) {
				s = "";
			} else {
				switch (method) {
					case 1:
					   s = _scramble1(ins);
					   break;
					case 2:
					   s = _radix(ins, 16);
					   break;
					case 3:
					   s = _radix(ins, 36);
					   break;
					case 4:
					   s = _zip(ins);
					   break;
					case 5:
					   s = _zip(ins, 36);
					   break;
					case 6:
					   s = _radix(ins, rdx);
					   break;
					case 7:
					   s = _scramble2(ins);
					   break;
					case 8:
					   s = _md5(ins);
					   break;
				}
			}
			return s;
		}
		
		public static function decode(ins:String, method:int = METHOD_INCREMENTAL_CHARSET, rdx:int = 36):String {
			var s:String;
				switch (method) {
					case 1:
					   s = _descramble1(ins);
					   break;
					case 2:
					   s = _deradix(ins, 16);
					   break;
					case 3:
					   s = _deradix(ins, 36);
					   break;
					case 4:
					   s = _dezip(ins);
					   break;
					case 5:
					   s = _dezip(ins, 36);
					   break;
					case 6:
					   s = _deradix(ins, rdx);
					   break;
					case 7:
					   s = _descramble2(ins);
					   break;
				}
			return s;
		}
		
		private static function _md5(ins:String):String {
			var s:String;
			var md5:MD5 = new MD5();
			var ba:ByteArray = new ByteArray();
			ba.writeUTF(ins);
			var ba2:ByteArray = new ByteArray();
			ba2 = md5.hash(ba);
			ba2.position = 0;
			s = _radix(ba2.readUTFBytes(16), 16);
			return s;
		}
		
		private static function _scramble1(ins:String):String {
			var s:String;
			var l:int = _chars.length;
			var r:int = Math.random()*l;
			var step:int;
			var curr:int;
			var next:int;
			ins = ins.toUpperCase();
			curr = r;
			s = _chars.charAt(curr);
			for (var i:int=0;i<ins.length;i++) {
				next = _chars.indexOf(ins.charAt(i));
				if (curr > next) {
					curr = next + l - curr;
				} else if (curr < next) {
					curr = next - curr;
				} else {
					curr = l;
				}
				s += _chars.charAt(curr);
			}
			return s;
		}

		private static function _scramble2(ins:String):String {
			var s:String;
			var l:int = _chars2.length;
			var r:int = Math.random()*l;
			var step:int;
			var curr:int;
			var next:int;
			curr = r;
			s = _chars2.charAt(curr);
			for (var i:int=0;i<ins.length;i++) {
				next = _chars2.indexOf(ins.charAt(i));
				if (curr > next) {
					curr = next + l - curr;
				} else if (curr < next) {
					curr = next - curr;
				} else {
					curr = l;
				}
				s += _chars2.charAt(curr);
			}
			return s;
		}

		private static function _descramble1(ins:String):String {
			var s:String = '';
			var l:int = _chars.length;
			var curr:int = _chars.indexOf(ins.charAt(0));
			var m:int;
			var next:int;
			for (var i:int=1;i<ins.length;i++) {
				next = _chars.indexOf(ins.charAt(i));
				m = (curr+next)%l;
				s += _chars.charAt(m);
				curr = next;
			}
			return s;
		}
		
		private static function _descramble2(ins:String):String {
			var s:String = '';
			var l:int = _chars2.length;
			var curr:int = _chars2.indexOf(ins.charAt(0));
			var m:int;
			var next:int;
			for (var i:int=1;i<ins.length;i++) {
				next = _chars2.indexOf(ins.charAt(i));
				m = (curr+next)%l;
				s += _chars2.charAt(m);
				curr = next;
			}
			return s;
		}
		
		private static function _radix(ins:String, radix:int = 16):String {
			var s:String = "";
			var t:String;
			for (var i:int=0;i<ins.length;i++) {
				t = ins.charCodeAt(i).toString(radix).toUpperCase();
				if (t.length==1) t = "0"+t;
				s += t;
			}
			return s;
		}
		
		private static function _deradix(ins:String, radix:int = 16):String {
			var s:String = "";
			var t:String;
			var u:uint;
			for (var i:int=0;i<ins.length;i+=2) {
				u = parseInt(ins.charAt(i)+ins.charAt(i+1), radix);
				t = String.fromCharCode(u);
				s += t;
			}
			return s;
		}
		
		private static function _zip(ins:String, radix:int = 16):String {
			var s:String = "";
			var ba:ByteArray = new ByteArray();
			var t:String;
			ba.writeUTF(ins);
			ba.compress();
			for (var i:int=0;i<ba.length;i++) {
				t = ba[i].toString(radix).toUpperCase();
				if (t.length==1) t = "0"+t;
				s += t;
			}
			return s;
		}
		
		private static function _dezip(ins:String, radix:int = 16):String {
			var s:String = "";
			var t:String;
			var u:uint;
			var ba:ByteArray = new ByteArray();
			for (var i:int=0;i<ins.length;i+=2) {
				u = parseInt(ins.charAt(i)+ins.charAt(i+1), radix);
				ba.writeByte(u);
			}
			ba.uncompress();
			s = ba.readUTF();
			return s;
		}

	}
	
}
