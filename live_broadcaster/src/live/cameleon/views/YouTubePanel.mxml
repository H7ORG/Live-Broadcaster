<?xml version="1.0" encoding="utf-8"?>
<s:VGroup
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:view="view.*"
	paddingLeft="20" paddingRight="10" paddingBottom="10" gap="10"
	currentState="loggedOut"
	creationComplete="init()"
	width="240" width.streamDisabled="60" width.connecting="340" width.streaming="340" xmlns:views="live.cameleon.views.*"
	>
	
	<fx:Declarations>
		<fx:Boolean id="streaming" />
		<fx:Boolean id="hasPermission" />
		<fx:Boolean id="youtubeError" />
		<fx:Boolean id="chatEnabled" />
		<fx:Boolean id="streamPrivate" />
		<fx:Boolean id="maxScroll">true</fx:Boolean>
		<fx:int id="scrollPosition" />
		<fx:String id="liveChatId" />
		<fx:int id="viewCount" />
		<fx:int id="likeCount" />
		<fx:int id="concurrentViewers" />
		<fx:String id="viewCountString">0</fx:String>
		<fx:String id="likeCountString">0</fx:String>
		<fx:String id="concurrentViewersString">0</fx:String>
		<fx:String id="youtubeStatus">Starting stream</fx:String>
		<fx:String id="title" />
		<fx:String id="defaultYouTubeLiveBroadcastId" />
		<fx:String id="defaultYouTubeLiveStreamId" />
		<fx:String id="youtubeErrorMessage" />
		<mx:ArrayCollection id="messageList" />
		<fx:XML id="privacyList">
			<root>
				<privacy>
					<label>Public</label>
				</privacy>
				<privacy>
					<label>Unlisted</label>
				</privacy>
				<privacy>
					<label>Private</label>
				</privacy>
			</root>
		</fx:XML>
		<mx:XMLListCollection id="privacies" source="{ privacyList.privacy }" />
	</fx:Declarations>
	
	<s:states>
		<mx:State name="loggedOut" />
		<mx:State name="disabled" />
		<mx:State name="enabled" />
		<mx:State name="connecting" />
		<mx:State name="streaming" />
		<mx:State name="streamDisabled" />
	</s:states>
	
	<s:transitions>
		<s:Transition fromState="*" toState="connecting">
			<s:Parallel target="{this}">
				<s:Resize duration="200" />
			</s:Parallel>
		</s:Transition>
		<s:Transition fromState="streaming" toState="enabled">
			<s:Parallel target="{this}">
				<s:Resize duration="200" />
			</s:Parallel>
		</s:Transition>
		<s:Transition fromState="connecting" toState="enabled">
			<s:Parallel target="{this}">
				<s:Resize duration="200" />
			</s:Parallel>
		</s:Transition>
		<s:Transition fromState="*" toState="streamDisabled">
			<s:Parallel target="{this}">
				<s:Resize duration="200" />
			</s:Parallel>
		</s:Transition>
		<s:Transition fromState="streamDisabled" toState="*">
			<s:Parallel target="{this}">
				<s:Resize duration="200" />
			</s:Parallel>
		</s:Transition>
	</s:transitions>
	
	<fx:Script>
		<![CDATA[
			import flash.desktop.Clipboard;
			import flash.desktop.ClipboardFormats;
			import flash.events.Event;
			import flash.events.TimerEvent;
			import flash.filesystem.File;
			import flash.net.URLRequest;
			import flash.net.navigateToURL;
			import flash.utils.Timer;
			
			import live.cameleon.modules.FinalModule;
			
			import org.igazine.apis.events.YouTubeEvent;
			import org.igazine.apis.youtube.LiveBroadcast;
			import org.igazine.apis.youtube.LiveChatMessage;
			import org.igazine.apis.youtube.LiveStream;
			import org.igazine.apis.youtube.Status;
			import org.igazine.apis.youtube.YouTube;
			import org.igazine.apis.youtube.YouTubeHelper;
			import org.igazine.nativeprocess.encoder.FFMPEG;
			import org.igazine.nativeprocess.events.FFMPEGEvent;
			
			import settings.API;
			import live.cameleon.settings.Application;
			import live.cameleon.settings.Debug;
			import live.cameleon.settings.Encoder;
			import live.cameleon.settings.URLs;
			import live.cameleon.settings.UserSettings;
			
			import live.cameleon.views.skins.VScrollBarSkin;
			
			
			private static const YOUTUBE_BROADCAST_START_TIME_DELAY:int = 30;
			private static const YOUTUBE_BROADCAST_END_TIME_DELAY:int = 30;
			private static const YOUTUBE_REFRESH_INITIAL_DELAY:Number = 5000;
			private static const YOUTUBE_REFRESH_DELAY:Number = 30000;
			
			private var ffmpeg:FFMPEG;
			private var youtubeChatNextPageToken:String = null;
			private var ffmpegWorkingDirectory:File;
			
			private var defaultYouTube:YouTube;
			private var liveStreamTimer:Timer;
			private var liveBroadcastTimer:Timer;
			private var shortDelay:Number = 2000;
			private var longDelay:Number = 10000;
			private var liveBroadcast:LiveBroadcast;
			private var liveStream:LiveStream;
			private var messages:Array;
			private var previousState:String;
			
			public var googleAccessToken:String;
			public var googleRefreshToken:String;
			
			public var rtmpAddress:String;
			
			public var module:FinalModule;
			
			public var description:String = "";
			public var privacy:String = "private";
			[Bindable] public var dvr:Boolean;
			[Bindable] public var embed:Boolean;
			[Bindable] public var record:Boolean;
			public var outputWidth:int;
			public var outputHeight:int;
			
			public var youtubeFPS:Number;
			public var youtubeHeight:int;
			
			public var finished:Boolean;
			
			protected function init():void {
				
				settingsObject = UserSettings.youtubeSettings;
				cbEmbed.selected = embed;
				cbDVR.selected = dvr;
				
			}
			
			public function setDisabled():void {
				
				previousState = this.currentState;
				this.currentState = "streamDisabled";
				
			}
			
			public function setEnabled():void {
				
				this.currentState = previousState;
				
			}
			
			protected function listInit():void {
				
				listMessages.scroller.verticalScrollBar.addEventListener( Event.CHANGE, scrollChange );
				listMessages.scroller.verticalScrollBar.setStyle("skinClass", VScrollBarSkin);
				
			}
			
			protected function addFFMPEGListeners():void {
				
				ffmpeg.addEventListener( FFMPEGEvent.INIT, ffmpegInit );
				ffmpeg.addEventListener( FFMPEGEvent.RETRY, ffmpegRetry );
				ffmpeg.addEventListener( FFMPEGEvent.START, ffmpegStart );
				ffmpeg.addEventListener( FFMPEGEvent.EXIT, ffmpegExit );
				ffmpeg.addEventListener( FFMPEGEvent.CONNECTION_ERROR, ffmpegConnectionError );
				ffmpeg.addEventListener( FFMPEGEvent.VIDEO_STREAM_FOUND, ffmpegVideoStreamFound );
				ffmpeg.addEventListener( FFMPEGEvent.ERROR_OUTPUT, ffmpegOutput );
				
			}
			
			protected function removeFFMPEGListeners():void {
				
				ffmpeg.removeEventListener( FFMPEGEvent.INIT, ffmpegInit );
				ffmpeg.removeEventListener( FFMPEGEvent.RETRY, ffmpegRetry );
				ffmpeg.removeEventListener( FFMPEGEvent.START, ffmpegStart );
				ffmpeg.removeEventListener( FFMPEGEvent.EXIT, ffmpegExit );
				ffmpeg.removeEventListener( FFMPEGEvent.CONNECTION_ERROR, ffmpegConnectionError );
				ffmpeg.removeEventListener( FFMPEGEvent.VIDEO_STREAM_FOUND, ffmpegVideoStreamFound );
				ffmpeg.removeEventListener( FFMPEGEvent.ERROR_OUTPUT, ffmpegOutput );
				
			}
			
			protected function ffmpegInit( e:FFMPEGEvent ):void {}
			protected function ffmpegRetry( e:FFMPEGEvent ):void {}
			protected function ffmpegStart( e:FFMPEGEvent ):void {
				
				//updateYouTubeStreams();
				
			}
			
			protected function ffmpegExit( e:FFMPEGEvent ):void {
				
				stop();
				
			}
			
			protected function ffmpegConnectionError( e:FFMPEGEvent ):void {}
			protected function ffmpegVideoStreamFound( e:FFMPEGEvent ):void {}
			protected function ffmpegOutput( e:FFMPEGEvent ):void {
				
				if ( Debug.TRACE_FFMPEG ) trace( e.data );
				
			}
			
			private function defaultYoutubeError( e:YouTubeEvent ):void {
				
				Tracer.log( "YOUTUBE ERROR:", e.errorCode );
				
				youtubeError = true;
				youtubeErrorMessage = e.error;
				
				stop();
				
			}
			
			protected function connectAccount():void {
				
				module.connectGoogleAccount();
				
			}
			
			protected function clearYouTubeError():void {
				
				youtubeError = false;
				youtubeErrorMessage = "";
				
			}
			
			protected function start():void {
				
				Tracer.enabled = true;
				
				this.dispatchEvent( new Event( Event.INIT ) );
				
				finished = false;
				
				messages = new Array();
				clearYouTubeError();
				privacy = String( dropdownPrivacy.selectedItem.label );
				dvr = cbDVR.selected;
				embed = cbEmbed.selected;
				//record = cbRecord.selected;
				streamPrivate = ( privacy.toLowerCase() == "private" );
				
				currentState = "connecting";
				youtubeStatus = "Starting live stream";
				
				if ( !ffmpeg ) {
					
					ffmpeg = new FFMPEG( module.ffmpegFile );
					
				}
				
				ffmpeg.disableRetry = true;
				ffmpeg.workingDirectory = File.applicationStorageDirectory;
				ffmpegWorkingDirectory = File.applicationStorageDirectory;
				ffmpegWorkingDirectory.createDirectory();
				ffmpeg.overwriteFiles = true;
				
				UserSettings.youtubeSettings = settingsObject;
				addFFMPEGListeners();
				//createYouTube();
				createDefaultYouTube();
				
			}
			
			public function stop():void {
				
				youtubeStatus = "Finishing live stream";
				currentState = "connecting";
				
				if ( ffmpeg ) {
					
					removeFFMPEGListeners();
					ffmpeg.stop();
					ffmpeg = null;
					
				}
				
				messageList.removeAll();
				
				transitionDefaultBroadcastToComplete();
				
			}
			
			protected function finish():void {
				
				currentState = "enabled";
				finished = true;
				
				this.dispatchEvent( new Event( Event.CLOSE ) );
				
			}
			
			protected function recheck():void {
				
				this.dispatchEvent( new Event( Event.CONNECT ) );
				
			}
			
			protected function visitYouTube():void {
				
				navigateToURL( new URLRequest( URLs.LINK_YOUTUBE_LIVE_DASHBOARD ) );
				
			}
			
			//
			// YouTube Logic
			// 
			
			// Listeners
			private function addDefaultYouTubeListeners():void {
				
				defaultYouTube.addEventListener( YouTubeEvent.ERROR, defaultYoutubeError );
				
			}
			
			private function removeDefaultYouTubeListeners():void {
				
				defaultYouTube.removeEventListener( YouTubeEvent.LIVE_CHAT_MESSAGES_LOADED, liveChatMessagesLoaded );
				defaultYouTube.removeEventListener( YouTubeEvent.LIVE_BROADCAST_LIST_LOADED, liveBroadcastListLoaded );
				defaultYouTube.removeEventListener( YouTubeEvent.LIVE_BROADCAST_UPDATED, liveBroadcastUpdated );
				defaultYouTube.removeEventListener( YouTubeEvent.LIVE_BROADCAST_LIST_LOADED, defaultLiveBroadcastListLoaded );
				defaultYouTube.removeEventListener( YouTubeEvent.LIVE_STREAM_LIST_LOADED, liveStreamListLoaded );
				defaultYouTube.removeEventListener( YouTubeEvent.LIVE_STREAM_LIST_LOADED, defaultLiveStreamLoaded );
				defaultYouTube.removeEventListener( YouTubeEvent.LIVE_BROADCAST_TRANSITIONED, liveBroadcastTransitioned );
				defaultYouTube.removeEventListener( YouTubeEvent.ERROR, defaultYoutubeError );
				
			}
			
			// Creating instances
			private function createDefaultYouTube():void {
				
				if ( defaultYouTube ) {
					
					disposeDefaultYouTube();
					defaultYouTube = null;
					
				}
				
				defaultYouTube = new YouTube();
				YouTube.loggerDebugFunction = Tracer.log;
				YouTube.loggerErrorFunction = Tracer.log;
				
				addDefaultYouTubeListeners();
				getDefaultStream();
				
			}
			
			// Disposing instances
			private function disposeDefaultYouTube():void {
				
				if ( liveStreamTimer ) {
					
					liveStreamTimer.removeEventListener( TimerEvent.TIMER_COMPLETE, liveStreamTimerComplete );
					liveStreamTimer.stop();
					liveStreamTimer = null;
					
				}
				
				if ( liveBroadcastTimer ) {
					
					liveBroadcastTimer.removeEventListener( TimerEvent.TIMER_COMPLETE, liveBroadcastTimerComplete );
					liveBroadcastTimer.stop();
					liveBroadcastTimer = null;
					
				}
				
				if ( defaultYouTube ) {
					
					removeDefaultYouTubeListeners();
					defaultYouTube.dispose();
					defaultYouTube = null;
					
				}
				
				if ( liveBroadcast ) liveBroadcast.dispose();
				liveBroadcast = null;
				
				if ( liveStream ) liveStream.dispose();
				liveStream = null;
				
				defaultYouTube = null;
				
			}
			
			// Loading default YouTube stream
			protected function getDefaultStream():void {
				
				trace( "defaultYouTubeLiveStreamId", defaultYouTubeLiveStreamId );
				defaultYouTube.addEventListener( YouTubeEvent.LIVE_STREAM_LIST_LOADED, defaultLiveStreamLoaded );
				defaultYouTube.listLiveStreams( defaultYouTubeLiveStreamId );
				
			}
			
			// Default live stream loaded, start streaming
			protected function defaultLiveStreamLoaded( e:YouTubeEvent ):void {
				
				defaultYouTube.removeEventListener( YouTubeEvent.LIVE_STREAM_LIST_LOADED, defaultLiveStreamLoaded );
				liveStream = e.liveStreamListResponse.items[0] as LiveStream;
				connectFFMPEGToDefaultStream();
				setupLiveStreamTimer();
				
			}
			
			// Creating timer for periodical LiveStream check
			protected function setupLiveStreamTimer():void {
				
				liveStreamTimer = new Timer( shortDelay, 1 );
				liveStreamTimer.addEventListener( TimerEvent.TIMER_COMPLETE, liveStreamTimerComplete );
				liveStreamTimer.start();
				
			}
			
			// LiveStream Timer function
			protected function liveStreamTimerComplete( e:TimerEvent ):void {
				
				defaultYouTube.addEventListener( YouTubeEvent.LIVE_STREAM_LIST_LOADED, liveStreamListLoaded );
				defaultYouTube.listLiveStreams( defaultYouTubeLiveStreamId, 1, [ YouTube.PART_STATUS, YouTube.PART_CDN ] );
				liveStreamTimer.start();
				
			}
			
			// LiveStream loaded
			protected function liveStreamListLoaded( e:YouTubeEvent ):void {
				
				defaultYouTube.removeEventListener( YouTubeEvent.LIVE_STREAM_LIST_LOADED, liveStreamListLoaded );
				
				liveStream.update( e.liveStreamListResponse.items[0].object );
				
				if ( liveStream.status.streamStatus == Status.STREAM_STATUS_INACTIVE ) {
					
					liveStreamTimer.delay = shortDelay;
					
				}
				
				if ( liveStream.status.streamStatus == Status.STREAM_STATUS_ACTIVE ) {
					
					liveStreamTimer.delay = longDelay;
					if ( !liveBroadcast ) getDefaultBroadcast();
					
				}
				
				liveStreamTimer.start();
				
			}
			
			// Loading default live broadcast
			protected function getDefaultBroadcast():void {
				
				defaultYouTube.addEventListener( YouTubeEvent.LIVE_BROADCAST_LIST_LOADED, defaultLiveBroadcastListLoaded );
				defaultYouTube.listLiveBroadcasts( null, 1, true );
				
			}
			
			// Default LiveBroadcast loaded
			protected function defaultLiveBroadcastListLoaded( e:YouTubeEvent ):void {
				
				defaultYouTube.removeEventListener( YouTubeEvent.LIVE_BROADCAST_LIST_LOADED, defaultLiveBroadcastListLoaded );
				liveBroadcast = e.liveBroadcastListResponse.items[0] as LiveBroadcast;
				updateLiveBroadcast();
				
			}
			
			// Updating LiveBroadcast with local settings
			protected function updateLiveBroadcast():void {
				
				defaultYouTube.addEventListener( YouTubeEvent.LIVE_BROADCAST_UPDATED, liveBroadcastUpdated );
				liveBroadcast.snippet.title = title;
				liveBroadcast.snippet.description = String( Application.BRAND_NOTICE + description );
				liveBroadcast.status.privacyStatus = privacy;
				liveBroadcast.contentDetails.enableDvr = dvr;
				liveBroadcast.contentDetails.enableEmbed = embed;
				defaultYouTube.updateLiveBroadcast( liveBroadcast );
				
			}
			
			// Setting LiveBroadcast timer
			protected function liveBroadcastUpdated( e:YouTubeEvent ):void {
				
				liveBroadcastTimer = new Timer( shortDelay, 1 );
				liveBroadcastTimer.addEventListener( TimerEvent.TIMER_COMPLETE, liveBroadcastTimerComplete );
				liveBroadcastTimer.start();
				
			}
			
			// LiveBroadcast Timer function
			protected function liveBroadcastTimerComplete( e:TimerEvent ):void {
				
				defaultYouTube.addEventListener( YouTubeEvent.LIVE_BROADCAST_LIST_LOADED, liveBroadcastListLoaded );
				defaultYouTube.listLiveBroadcasts( liveBroadcast.id, 1, false, [ YouTube.PART_STATUS, YouTube.PART_CONTENT_DETAILS ] );
				
			}
			
			// LiveBroadcast Loaded
			protected function liveBroadcastListLoaded( e:YouTubeEvent ):void {
				
				defaultYouTube.removeEventListener( YouTubeEvent.LIVE_BROADCAST_LIST_LOADED, liveBroadcastListLoaded );
				
				if ( e.liveBroadcastListResponse.items.length > 0 ) {
					
					liveBroadcast.update( e.liveBroadcastListResponse.items[0].object );
					
				}
				
				if ( liveBroadcast.status.lifeCycleStatus == Status.BROADCAST_LIFECYCLE_STATUS_LIVE ) {
					
					currentState = "streaming";
					liveBroadcastTimer.delay = longDelay;
					getVideoDetails();
					module.setYoutubeStream( true );
					module.updatePIPLinks( YouTubeHelper.getWebLink( liveBroadcast ) );
					
				}
				
				streamPrivate = ( liveBroadcast.status.privacyStatus == "private" );
				embed = liveBroadcast.contentDetails.enableEmbed;
				if ( buttonEmbed ) buttonEmbed.enabled = embed;
				
				liveBroadcastTimer.start();
				
			}
			
			// Final step 1 - transition default LiveBroadcast to Complete
			protected function transitionDefaultBroadcastToComplete():void {
				
				if ( defaultYouTube && liveBroadcast ) {
					
					defaultYouTube.addEventListener( YouTubeEvent.LIVE_BROADCAST_TRANSITIONED, liveBroadcastTransitioned );
					defaultYouTube.transitionLiveBroadcast( liveBroadcast, LiveBroadcast.BROADCAST_STATUS_COMPLETE );
					
				} else {
					
					liveBroadcastTransitioned( null );
					
				}
				
			}
			
			// Final step 2 - default LiveBroadcast is transitioned to Complete
			protected function liveBroadcastTransitioned( e:YouTubeEvent ):void {
				
				if ( defaultYouTube ) defaultYouTube.removeEventListener( YouTubeEvent.LIVE_BROADCAST_TRANSITIONED, liveBroadcastTransitioned );
				
				disposeDefaultYouTube();
				
				finish();
				
			}
			
			// Loading video details
			protected function getVideoDetails():void {
				
				defaultYouTube.addEventListener( YouTubeEvent.VIDEO_LIST_LOADED, videoListLoaded );
				defaultYouTube.listVideos( liveBroadcast.id );
				
			}
			
			// Video list loaded
			protected function videoListLoaded( e:YouTubeEvent ):void {
				
				defaultYouTube.removeEventListener( YouTubeEvent.VIDEO_LIST_LOADED, videoListLoaded );
				
				if ( e.videoListResponse.items.length > 0 ) {
					
					if ( e.videoListResponse.items[0].statistics ) {
						
						viewCount = e.videoListResponse.items[0].statistics.viewCount;
						likeCount = e.videoListResponse.items[0].statistics.likeCount;
						
					}
					
					if ( e.videoListResponse.items[0].liveStreamingDetails ) {
						
						concurrentViewers = e.videoListResponse.items[0].liveStreamingDetails.concurrentViewers;
						liveChatId = e.videoListResponse.items[0].liveStreamingDetails.activeLiveChatId;
						
					}
					
				}
				
				chatEnabled = ( liveChatId != null );
				
				viewCountString = getFormattedCount( viewCount );
				likeCountString = getFormattedCount( likeCount );
				concurrentViewersString = getFormattedCount( concurrentViewers );
				listYouTubeMessages();
				
				module.updatePIP( likeCountString, concurrentViewersString, "null", "null" );
				
			}
			
			// Formatting views, likes
			protected function getFormattedCount( i:int ):String {
				
				var s:String = "0";
				var n:Number = i;
				s = String( i );
				
				if ( i >= 1000 ) {
					
					n = i / 1000;
					s = n.toFixed( 1 ) + "k";
					
				}
				
				return s;
				
			}
			
			// Loading chat messages
			protected function listYouTubeMessages():void {
				
				if ( chatEnabled && ( liveChatId != null ) ) {
					
					defaultYouTube.addEventListener( YouTubeEvent.LIVE_CHAT_MESSAGES_LOADED, liveChatMessagesLoaded );
					defaultYouTube.listLiveChatMessages( liveChatId, youtubeChatNextPageToken );
					
				}
				
			}
			
			// Chat messages loaded
			protected function liveChatMessagesLoaded( e:YouTubeEvent ):void {
				
				//trace( "================================================================== listYouTubeMessages" );
				//trace( e.liveChatMessageListResponse.nextPageToken, e.liveChatMessageListResponse.pollingIntervalMillis );
				
				if ( defaultYouTube ) defaultYouTube.removeEventListener( YouTubeEvent.LIVE_CHAT_MESSAGES_LOADED, liveChatMessagesLoaded );
				
				updateMessages( e.liveChatMessageListResponse.items );
				
				youtubeChatNextPageToken = e.liveChatMessageListResponse.nextPageToken;
				
			}
			
			// Updating chat message list
			protected function updateMessages( a:Array ):void {
				
				var i:int;
				var edited:Boolean;
				
				if ( a.length > 0 ) edited = true;
				
				for ( i = 0; i < a.length; i++ ) {
					
					if ( ( a[i] as LiveChatMessage ).snippet.type == "textMessageEvent" ) messages.push( a[i] );
					
				}
				
				if ( messages.length > API.I.YOUTUBE_MAX_MESSAGES ) {
					
					edited = true;
					messages.splice( 0, messages.length - API.I.YOUTUBE_MAX_MESSAGES );
					
				}
				
				if ( edited ) {
					
					messageList.source = messages;
					scrollToBottom();
					module.setPIPMessages( messages );
					
				}
				
			}
			
			protected function scrollToBottom():void {
				
				listMessages.scroller.verticalScrollBar.value = listMessages.scroller.verticalScrollBar.maximum;
				
				/*
				if ( listMessages ) {
				
				if ( maxScroll ) {
				
				listMessages.scroller.verticalScrollBar.value = listMessages.scroller.verticalScrollBar.maximum;
				
				} else {
				
				listMessages.scroller.verticalScrollBar.value = scrollPosition;
				
				}
				
				}
				*/
				
			}
			
			protected function scrollChange( e:Event ):void {
				
				//scrollPosition = listMessages.scroller.verticalScrollBar.value;
				
				if ( listMessages.scroller.verticalScrollBar.value == listMessages.scroller.verticalScrollBar.maximum ) {
					
					maxScroll = true;
					
				} else {
					
					maxScroll = false;
					
				}
				
			}
			
			protected function connectFFMPEGToDefaultStream():void {
				
				rtmpAddress = module.cc.rtmpProtocol + "://" + module.cc.address + ":" + String( module.cc.rtmpPort ) + "/" + module.cc.applicationName + "/" + URLs.SERVER_STREAM_NAME;
				
				trace( ":::::::::::::::::::::::::::::::::::", rtmpAddress );
				
				var s:Vector.<String> = new Vector.<String>();
				s.push( "-stats", "-y", "-loglevel", "32", "-thread_queue_size", "512" );
				if ( Encoder.LOGGING ) s.push( "-report" );
				s.push( "-i", rtmpAddress );
				s.push( "-vcodec", "copy", "-acodec", "copy" );
				s.push( "-tune", "zeroLatency" );
				s.push( "-copytb", "1" );
				s.push( "-f", "flv" );
				s.push( liveStream.cdn.ingestionInfo.ingestionAddress + "/" + liveStream.cdn.ingestionInfo.streamName );
				trace( s.join( " " ) );
				ffmpeg.execute( s );			
				
			}
			
			protected function setState():void {
				
				if ( liveBroadcast && ( liveBroadcast.status.lifeCycleStatus == Status.BROADCAST_LIFECYCLE_STATUS_LIVE ) ) {
					
					if ( liveStream && ( liveStream.status.streamStatus == Status.STREAM_STATUS_ACTIVE ) ) {
						
						youtubeStatus = "Streaming Live";
						currentState = "streaming";
						
					} else {
						
						youtubeStatus = "Connecting";
						currentState = "connecting";
						
					}
					
				} else {
					
					youtubeStatus = "Connecting";
					currentState = "connecting";
					
				}
				
			}
			
			private function copyEmbedCode():void {
				
				Clipboard.generalClipboard.setData( ClipboardFormats.TEXT_FORMAT, YouTubeHelper.getHTMLEmbedCode( liveBroadcast ) );
				
			}
			
			private function copyLink():void {
				
				Clipboard.generalClipboard.setData( ClipboardFormats.TEXT_FORMAT, YouTubeHelper.getWebLink( liveBroadcast ) );
				
			}
			
			private function openLink():void {
				
				navigateToURL( new URLRequest( YouTubeHelper.getWebLink( liveBroadcast ) ) );
				
			}
			
			private function get settingsObject():Object {
				
				var o:Object = new Object();
				o.embed = embed;
				o.dvr = dvr;
				o.privacy = privacy;
				return o;
				
			}
			
			private function set settingsObject( value:Object ):void {
				
				if ( value.privacy ) {
					
					privacy = value.privacy;
					
					for ( var i:int = 0; i < privacies.length; i++ ) {
						
						if ( String( privacies[i].label ).toLowerCase() == privacy.toLowerCase() ) {
							
							dropdownPrivacy.setSelectedIndex( i );
							break;
							
						}
						
					}
					
				}
				
				embed = Boolean( value.embed );
				dvr = Boolean( value.dvr );
				
			}
			
		]]>
	</fx:Script>
	
	<s:Ellipse visible="false" width="{ this.width * 1.5 }" height="{ this.width * 1.5 }" includeInLayout="false" y="{ (this.height - this.width * 1.5) / 2 }" x="{ this.width * 1.5 / 2 * -1 }">
		
		<s:fill>
			
			<mx:RadialGradient>
				<mx:entries>
					<mx:GradientEntry color="#D40101" alpha=".2" />
					<mx:GradientEntry color="#D40101" alpha="0" />
				</mx:entries>
			</mx:RadialGradient>
			
		</s:fill>
		
	</s:Ellipse>
	
	<s:HGroup verticalAlign="middle" width="100%" excludeFrom="streamDisabled">
		
		<s:BitmapImage smooth="true" scaleX=".5" scaleY=".5" source='@Embed(source="../../../../assets/youtube_logo.png")' />
		<s:Label fontWeight="bold" text="LIVE" includeIn="streaming" color="#D40101" />
		<mx:Spacer width="100%" />
		<s:HGroup height="100%" verticalAlign="middle" includeIn="connecting, streaming" toolTip="Total views: { viewCountString }">
			<s:BitmapImage source='@Embed(source="../../../../assets/icon_view.png")' scaleX=".5" scaleY=".5" />
			<s:Label text="{ concurrentViewersString }" lineHeight="11" height="11" />
			<mx:Spacer width="0" includeIn="connecting, streaming" />
			<s:BitmapImage source='@Embed(source="../../../../assets/icon_like.png")' scaleX=".5" scaleY=".5" />
			<s:Label text="{ likeCountString }" lineHeight="11" height="11" />
		</s:HGroup>
		
	</s:HGroup>
	
	<mx:Spacer height="0" />
	
	<s:VGroup alpha=".33" width="100%" height="100%" gap="20" includeIn="streamDisabled" horizontalAlign="center" verticalAlign="middle">
		
		<s:Label rotation="-90" text="YouTube Live is disabled while Facebook is streaming" />
		<s:BitmapImage rotation="-90" smooth="true" scaleX=".5" scaleY=".5" source='@Embed(source="../../../../assets/youtube_logo.png")' />
		
	</s:VGroup>
	
	<s:VGroup width="100%" height="100%" gap="10" includeIn="loggedOut">
		
		<views:ColoredButton label="Connect YouTube" color="#D40101" width="100%" click="connectAccount()" hAlign="left" />
		
	</s:VGroup>
	
	<s:VGroup width="100%" height="100%" gap="20" includeIn="enabled" itemCreationPolicy="immediate">
		
		<s:Label text="Privacy" styleName="h3" />
		
		<views:Dropdown
			id="dropdownPrivacy"
			prompt="Privacy settings"
			icon='@Embed(source="../../../../assets/icon_privacy.png")'
			width="100%"
			dataProvider="{ privacies }"
			toolTip="Change the privacy settings of your live stream"
			/>
		
		<mx:Spacer height="0" />
		
		<s:Label text="Options" styleName="h3" />
		
		<!--
		<view:CheckBoxX id="cbRecord" label="Record video" selected="true" toolTip="Record your broadcast on YouTube" />
		<mx:Spacer height="0" />
		-->
		<views:CheckBoxX id="cbDVR" label="DVR Functionality" selected="{ dvr }" toolTip="Viewers will be able to seek back a maximum of 4 hours while you are streaming" />
		<!--<mx:Spacer height="0" />-->
		<views:CheckBoxX id="cbEmbed" label="HTML Embeddable" selected="{ embed }" toolTip="Let others embed your broadcast" />
		<!--<mx:Spacer height="0" />-->
		<!-- <view:CheckBoxX label="Chat" toolTip="Turn YouTube chat (read only) on or off. Works only if the broadcast is Public or Unlisted" /> -->
		
		<mx:Spacer />
		
	</s:VGroup>
	
	<views:ColoredButton
		includeIn="enabled"
		width="100%"
		color="#D40101"
		label="Start YouTube Live"
		hAlign="left"
		enabled="{ streaming &amp;&amp; ( dropdownPrivacy.selectedIndex >= 0 ) }"
		click="start()"
		/>
	
	<s:VGroup width="100%" height="100%" gap="10" includeIn="connecting">
		<s:Label width="100%" text="{ youtubeStatus }" styleName="h3" />
		<s:Label width="100%" text="Please wait..." />
	</s:VGroup>
	
	<s:VGroup width="100%" height="100%" gap="10" includeIn="streaming">
		
		<s:Label width="100%" text="Chat is disabled" styleName="h3" includeInLayout="{ !chatEnabled || streamPrivate }" visible="{ !chatEnabled || streamPrivate }" />
		<s:Label width="100%" text="Visit Live Dashboard to enable live chat" includeInLayout="{ !chatEnabled }" visible="{ !chatEnabled }" />
		<s:Label width="100%" text="Live Stream is private" includeInLayout="{ streamPrivate }" visible="{ streamPrivate }" />
		<s:Label width="100%" text="No message yet" styleName="h3" includeInLayout="{ chatEnabled &amp;&amp; !streamPrivate &amp;&amp; ( messageList.length == 0 ) }" visible="{ chatEnabled &amp;&amp; !streamPrivate &amp;&amp; ( messageList.length == 0 ) }" />
		<s:Label width="100%" text="New messages will appear here" includeInLayout="{ chatEnabled &amp;&amp; !streamPrivate &amp;&amp; ( messageList.length == 0 ) }" visible="{ chatEnabled &amp;&amp; !streamPrivate &amp;&amp; ( messageList.length == 0 ) }" />
		
		<s:List
			id="listMessages"
			width="100%" height="100%"
			dataProvider="{ messageList }"
			itemRenderer="live.cameleon.views.renderers.ChatItemYouTube"
			includeInLayout="{ chatEnabled &amp;&amp; !streamPrivate }"
			visible="{ chatEnabled &amp;&amp; !streamPrivate }"
			borderVisible="false"
			horizontalScrollPolicy="off"
			updateComplete="scrollToBottom()"
			creationComplete="listInit()"
			useVirtualLayout="true"
			>
			<s:layout>
				<s:VerticalLayout gap="10" />
			</s:layout>
		</s:List>
		
	</s:VGroup>
	
	<s:HGroup width="100%" includeIn="streaming">
		
		<views:ColoredButton
			width="100%"
			color="#D40101"
			label="Stop"
			enabled="{ streaming }"
			click="stop()"
			hAlign="left"
			toolTip="Stop YouTube live stream"
			/>
		
		<views:ColoredButton
			width="36"
			color="#3F424C"
			icon='@Embed(source="../../../../assets/icon_public.png")'
			showIcon="true"
			showLabel="false"
			enabled="{ streaming }"
			click="openLink()"
			toolTip="Open YouTube live stream in browser"
			/>
		
		<views:ColoredButton
			showIcon="true"
			showLabel="false"
			width="36"
			color="#3F424C"
			icon='@Embed(source="../../../../assets/icon_link.png")'
			enabled="{ streaming }"
			click="copyLink()"
			toolTip="Copy web link code to clipboard"
			/>
		
		<views:ColoredButton
			id="buttonEmbed"
			showIcon="true"
			showLabel="false"
			width="36"
			color="#3F424C"
			icon='@Embed(source="../../../../assets/icon_embed.png")'
			enabled="{ embed }"
			click="copyEmbedCode()"
			toolTip="Copy HTML embed code to clipboard"
			/>
		
	</s:HGroup>
	
	<s:Label
		includeIn="disabled"
		width="100%"
		maxDisplayedLines="5"
		text="YouTube is not enabled on your account. Click the button to visit YouTube settings in your browser"
		/>
	
	<views:ColoredButton
		includeIn="disabled"
		width="100%"
		color="#D40101"
		label="YouTube Live Settings"
		click="visitYouTube()"
		/>
	
	<views:ColoredButton
		includeIn="disabled"
		width="100%"
		color="#D40101"
		label="Re-check"
		click="recheck()"
		/>
	
</s:VGroup>